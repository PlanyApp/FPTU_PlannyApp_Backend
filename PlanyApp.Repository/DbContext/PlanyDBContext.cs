// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace PlanyApp.Repository.Models;

public partial class PlanyDBContext : DbContext
{
    public PlanyDBContext()
    {
    }

    public PlanyDBContext(DbContextOptions<PlanyDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Challenge> Challenges { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupMember> GroupMembers { get; set; }

    public virtual DbSet<Hotel> Hotels { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<Place> Places { get; set; }

    public virtual DbSet<Plan> Plans { get; set; }

    public virtual DbSet<PlanList> PlanLists { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Transportation> Transportations { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserChallengeProgress> UserChallengeProgresses { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.TrackAll);


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Categori__19093A2B8618613D");

            entity.HasIndex(e => e.Name, "UQ__Categori__737584F6667A485B").IsUnique();

            entity.Property(e => e.CategoryId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("CategoryID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Challenge>(entity =>
        {
            entity.HasKey(e => e.ChallengeId).HasName("PK__Challeng__C7AC81282CEC2C4A");

            entity.Property(e => e.ChallengeId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ChallengeID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.DifficultyLevel).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PackageId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.PointsAwarded).HasDefaultValue(0);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.CreatedByUser).WithMany(p => p.Challenges)
                .HasForeignKey(d => d.CreatedByUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__Challenge__Creat__0D7A0286");

            entity.HasOne(d => d.Item).WithMany(p => p.Challenges)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__Challenge__ItemI__0B91BA14");

            entity.HasOne(d => d.Package).WithMany(p => p.Challenges)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__Challenge__Packa__0C85DE4D");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK__Groups__149AF30ACEB42F24");

            entity.Property(e => e.GroupId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("GroupID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.IsPrivate).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("OwnerID");
            entity.Property(e => e.PlanId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PlanID");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Owner).WithMany(p => p.Groups)
                .HasForeignKey(d => d.OwnerId)
                .HasConstraintName("FK__Groups__OwnerID__68487DD7");

            entity.HasOne(d => d.Plan).WithMany(p => p.Groups)
                .HasForeignKey(d => d.PlanId)
                .HasConstraintName("FK__Groups__PlanID__693CA210");
        });

        modelBuilder.Entity<GroupMember>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.UserId }).HasName("PK__GroupMem__C5E27FC086BBCF69");

            entity.Property(e => e.GroupId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("GroupID");
            entity.Property(e => e.UserId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.CashContributed)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.JoinedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.RoleInGroup)
                .HasMaxLength(50)
                .HasDefaultValue("Member");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupMembers)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("FK__GroupMemb__Group__70DDC3D8");

            entity.HasOne(d => d.User).WithMany(p => p.GroupMembers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__GroupMemb__UserI__71D1E811");
        });

        modelBuilder.Entity<Hotel>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__Hotels__727E83EB8C181421");

            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Latitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Item).WithOne(p => p.Hotel)
                .HasForeignKey<Hotel>(d => d.ItemId)
                .HasConstraintName("FK__Hotels__ItemID__4222D4EF");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__Images__7516F4EC50027C6B");

            entity.Property(e => e.ImageId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ImageID");
            entity.Property(e => e.ContentType).HasMaxLength(100);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.FileSizeKb).HasColumnName("FileSizeKB");
            entity.Property(e => e.ImageData).IsRequired();
            entity.Property(e => e.IsPrimary).HasDefaultValue(false);
            entity.Property(e => e.ReferenceId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceType)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("PK__Invoices__D796AAD5E64E478E");

            entity.HasIndex(e => e.TransactionId, "UQ__Invoices__55433A4A13776E98").IsUnique();

            entity.Property(e => e.InvoiceId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("InvoiceID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FinalAmount)
                .HasComputedColumnSql("([Amount]-[Discount])", false)
                .HasColumnType("decimal(19, 2)");
            entity.Property(e => e.InvoiceDate).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.PackageId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.PaymentMethod).HasMaxLength(100);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(255)
                .HasColumnName("TransactionID");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UserID");

            entity.HasOne(d => d.Package).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__Invoices__Packag__02FC7413");

            entity.HasOne(d => d.User).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Invoices__UserID__02084FDA");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__Items__727E83EB9DF5FA4F");

            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("CategoryID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.ItemType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Category).WithMany(p => p.Items)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__Items__CategoryI__398D8EEE");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.PackageId).HasName("PK__Packages__322035EC70A55E48");

            entity.Property(e => e.PackageId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Active");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Subscription");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");
        });

        modelBuilder.Entity<Place>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__Places__727E83EBB395105B");

            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Latitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Item).WithOne(p => p.Place)
                .HasForeignKey<Place>(d => d.ItemId)
                .HasConstraintName("FK__Places__ItemID__3F466844");
        });

        modelBuilder.Entity<Plan>(entity =>
        {
            entity.HasKey(e => e.PlanId).HasName("PK__Plans__755C22D7689C0366");

            entity.Property(e => e.PlanId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PlanID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("OwnerID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Draft");
            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Owner).WithMany(p => p.Plans)
                .HasForeignKey(d => d.OwnerId)
                .HasConstraintName("FK__Plans__OwnerID__4D94879B");
        });

        modelBuilder.Entity<PlanList>(entity =>
        {
            entity.HasKey(e => e.PlanListId).HasName("PK__PlanList__105E9841EC1F2E11");

            entity.ToTable("PlanList");

            entity.HasIndex(e => new { e.PlanId, e.DayNumber, e.ItemNo }, "UQ__PlanList__6101882CFE0DB065").IsUnique();

            entity.Property(e => e.PlanListId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PlanListID");
            entity.Property(e => e.ItemId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.PlanId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PlanID");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Item).WithMany(p => p.PlanLists)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK__PlanList__ItemID__5441852A");

            entity.HasOne(d => d.Plan).WithMany(p => p.PlanLists)
                .HasForeignKey(d => d.PlanId)
                .HasConstraintName("FK__PlanList__PlanID__534D60F1");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__Ratings__FCCDF85CEF063FF5");

            entity.Property(e => e.RatingId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("RatingID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.DatePosted).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.PlanId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PlanID");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UserID");

            entity.HasOne(d => d.Item).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Ratings__ItemID__60A75C0F");

            entity.HasOne(d => d.Plan).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Ratings__PlanID__5FB337D6");

            entity.HasOne(d => d.User).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Ratings__UserID__619B8048");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE3A5FD9EC9E");

            entity.HasIndex(e => e.Name, "UQ__Roles__737584F63F52C772").IsUnique();

            entity.Property(e => e.RoleId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("RoleID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Transportation>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__Transpor__727E83EBBC2B1543");

            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Latitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Item).WithOne(p => p.Transportation)
                .HasForeignKey<Transportation>(d => d.ItemId)
                .HasConstraintName("FK__Transport__ItemI__3C69FB99");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("Users");

            entity.HasIndex(e => e.Email, "idx_User_Email").IsUnique();
            
            // Ensure a FILTERED unique index for GoogleId to allow multiple NULLs
            entity.HasIndex(e => e.GoogleId, "IX_User_GoogleId_Filtered").IsUnique().HasFilter("[GoogleId] IS NOT NULL");

            entity.Property(e => e.UserId)
                .HasColumnName("UserID")
                .HasMaxLength(36)
                .IsUnicode(false)
                .ValueGeneratedOnAdd();

            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);

            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);

            entity.Property(e => e.Phone).HasMaxLength(15);

            entity.Property(e => e.Address).HasMaxLength(255);

            entity.Property(e => e.Avatar).HasMaxLength(255);

            entity.Property(e => e.GoogleId).HasMaxLength(255);

            entity.Property(e => e.EmailVerified)
                .IsRequired()
                .HasDefaultValue(false);

            entity.Property(e => e.PasswordResetToken).HasMaxLength(255);

            entity.Property(e => e.PasswordResetTokenExpiresAt);

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .ValueGeneratedOnAdd();

            entity.Property(e => e.UpdatedDate)
                .HasDefaultValueSql("(getdate())")
                .ValueGeneratedOnAddOrUpdate();

            entity.Property(e => e.RoleId)
                .HasColumnName("RoleId")
                .HasMaxLength(36)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_User_Role");
        });

        modelBuilder.Entity<UserChallengeProgress>(entity =>
        {
            entity.HasKey(e => e.UserChallengeProgressId).HasName("PK__UserChal__8703337EC5CA8068");

            entity.ToTable("UserChallengeProgress");

            entity.HasIndex(e => new { e.UserId, e.ChallengeId }, "UQ__UserChal__8BF204BFEF5D912E").IsUnique();

            entity.Property(e => e.UserChallengeProgressId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UserChallengeProgressID");
            entity.Property(e => e.ChallengeId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ChallengeID");
            entity.Property(e => e.PointsEarned).HasDefaultValue(0);
            entity.Property(e => e.ProofImageId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ProofImageID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("NotStarted");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UserID");

            entity.HasOne(d => d.Challenge).WithMany(p => p.UserChallengeProgresses)
                .HasForeignKey(d => d.ChallengeId)
                .HasConstraintName("FK__UserChall__Chall__160F4887");

            entity.HasOne(d => d.ProofImage).WithMany(p => p.UserChallengeProgresses)
                .HasForeignKey(d => d.ProofImageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__UserChall__Proof__17036CC0");

            entity.HasOne(d => d.User).WithMany(p => p.UserChallengeProgresses)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__UserChall__UserI__151B244E");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}